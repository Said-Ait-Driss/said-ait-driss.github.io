// learn jenkins : 
// pipeline :
    basically pipeline is a set of steps defined on stages block each stage of stages is a step in pipeline . 
        and this stage contains a set of child steps 


pipeline {
    agent any // agents
    stages { 
      stage ('Checkout code'){
        steps {
          git(url: 'https://github.com/Said-Ait-Driss/said-ait-driss.github.io', branch: 'main')
        }
      }
      stage ('pre-build'){
        steps {
            sh 'echo pre-buid'
        }
      }
      stage ('buid'){
        steps{
            sh 'echo build'
        }
      }
      stage ('unit tests '){
        steps{
            sh 'echo unit test step'
        }
      }

      stage ('deploy'){
        steps{
            sh 'echo deploy'
        }
      }

      stage ('regression testing'){
        steps{
            sh 'echo  regression testing'
        }
      }

      stage ('deploy to production'){
        steps{
            sh 'deploy to production '
        }
      }
    }
    
    post {
        always {
            sh 'echo cleanup after everything' 
        }

        failure {
            sh 'echo only on failure' 
        }

        success {
            sh 'echo only on success' 
        }

        changed {
            sh 'echo only on if status changed from success to failure or vice a versa' 
        }

        unstable {
            sh 'echo only on unstable' 
        }
    }
  }
  

  -------------
  parallel :
  pipeline {
    agent any // agents
    stages { 
      stage ('deploy'){

        parallel {

            stage("nameOfParallelStage"){

                steps{
                    echo 'run from parallel stage '
                }
            }

            stage("nameOfParallelStage2"){
                
                steps{
                    echo 'run from parallel stage 2'
                }
            }
            }
        
        }
      }
    }
}

---------------- environment variables :

 pipeline {
    agent any
    environment {
      fname = "said"
    }
    stages { 
      stage ('deploy'){
          steps{
              echo "hello ${fname}"
            }
        }

      }

    }

    --------- credentials
  - USR && PSW => are statics and not changable

pipeline {
    agent any
    environment {
      myCred = credentials("id_of_jenkins_credentials")
      username = myCred_USR
      password = myCred_PSW
    }
    stages { 
      stage ('deploy'){
          steps{
              echo "my username : ${username}"
              echo "my password : ${password}"
            }
        }

      }

    }

------------ options directive
 - retry : retry failed stage number of times
 - there's other options like : timeout ,...
 1) first method :

pipeline {
    agent any
    options {
      retry(2)
    }
    stages { 
      stage ('deploy'){
          steps{
              error("failed stage ")
            }
        }
    }
}

2) second method :

pipeline {
    agent any
    stages { 
      stage ('deploy'){
            options {
             retry(2)
          }
          steps{
              error("failed stage ")
            }
        }
    }
}

------------ parameters directive
 - execute job with parameters
 - we will be asked to enter params when we build the jobs (enter fname , choice a city ,...)

pipeline {
    agent any
    parameters {
      string(name :"fname" ,defeaultValue:"said",description:"")
      choice(name :"city" ,choices:["ouarzazate","meknes","tenger"],description:"")
    }
    stages { 
      stage ('deploy'){
            options {
             retry(2)
          }
          steps{
              echo "my name is ${params.fname}"
              echo "my city is ${params.city}"
            }
        }
    }
}

------------ when directive
 - execute a stage when some condition 
 - beforeAgent => check the condition before even enter to the agent 

pipeline {
    agent any
    stages { 
      stage ('deploy'){
          when {
            beforeAgent : true
            branch : "main"
          }
          steps{
              echo "only for main branch"
            }
        }
    }
}


------------ if else flow control
 - limit the executed steps inside a stage 


pipeline {
    agent any
    environment{
      fname = "said"
    }
    stages { 
      stage ('deploy'){
          steps {
              echo "print environment variable outside script like this : ${fname}"
              script {
                echo "print environment variable inside script like this : ${env.fname}"
                if(env.fname == "said"){
                  echo "I am said ."
                }
                else {
                  echo "I am inside else blcok"
                }
              }
            }
        }
    }
}

------------ try catch flow control


pipeline {
    agent any
    environment{
      fname = "said"
    }
    stages { 
      stage ('deploy'){
          steps {
            try{
              sh "dfdg"
            }
            catch(err){
              echo "an error occured "
            }
          }
      }
    }
}